Function("ENV", "(function() {\n  this.GitSquire = function(I) {\n    var self;\n    if (I == null) {\n      I = {};\n    }\n    Object.defaults(I, {\n      accessToken: null\n    });\n    return self = {\n      auth: function() {\n        var scope, url;\n        scope = \"gist,repo,user:email\";\n        url = \"https://github.com/login/oauth/authorize?client_id=bc46af967c926ba4ff87&scope=\" + scope;\n        return window.location = url;\n      },\n      onload: function() {\n        var code, _ref,\n          _this = this;\n        if (code = (_ref = window.location.href.match(/\\?code=(.*)/)) != null ? _ref[1] : void 0) {\n          $.getJSON(\"https://hamljr-auth.herokuapp.com/authenticate/\" + code, function(data) {\n            var token;\n            if (token = data.token) {\n              I.accessToken = token;\n              return localStorage.authToken = token;\n            }\n          });\n        }\n        if (localStorage.authToken) {\n          return I.accessToken = localStorage.authToken;\n        }\n      },\n      api: function(path, options) {\n        var url;\n        if (options == null) {\n          options = {};\n        }\n        if (path.match(/^http/)) {\n          url = path;\n        } else {\n          url = \"https://api.github.com/\" + path;\n        }\n        options.headers || (options.headers = {});\n        if (I.accessToken) {\n          options.headers[\"Authorization\"] = \"token \" + I.accessToken;\n        }\n        options = Object.extend({\n          url: url,\n          type: \"GET\",\n          dataType: 'json'\n        }, options);\n        if (options.data && typeof options.data !== \"string\") {\n          options.data = JSON.stringify(options.data);\n        }\n        return $.ajax(options);\n      },\n      Repo: function(_arg) {\n        var api, branch, owner, repo;\n        owner = _arg.owner, repo = _arg.repo, branch = _arg.branch;\n        if (branch == null) {\n          branch = \"master\";\n        }\n        api = function(path, options) {\n          var base, url;\n          if (options == null) {\n            options = {};\n          }\n          base = \"repos/\" + owner + \"/\" + repo;\n          if (path.match(/^http/)) {\n            url = path;\n          } else {\n            url = \"https://api.github.com/\" + base + \"/\" + path;\n          }\n          return self.api(url, options);\n        };\n        return {\n          issues: function() {\n            return api(\"issues\");\n          },\n          createIssue: function(params) {\n            return api(\"issues\", {\n              type: \"POST\",\n              data: params\n            });\n          }\n        };\n      }\n    };\n  };\n\n}).call(this);\n;(function() {\n  var _base;\n\n  this.HAMLjr || (this.HAMLjr = {});\n\n  (_base = this.HAMLjr).templates || (_base.templates = {});\n\n  this.HAMLjr.templates[\"main\"] = function(data) {\n    return (function() {\n      var main, __attribute, __each, __element, __filter, __on, __pop, __push, __render, __text, __with, _ref;\n      _ref = HAMLjr.Runtime(this), __push = _ref.__push, __pop = _ref.__pop, __attribute = _ref.__attribute, __filter = _ref.__filter, __text = _ref.__text, __on = _ref.__on, __each = _ref.__each, __with = _ref.__with, __render = _ref.__render;\n      __push(document.createDocumentFragment());\n      main = this;\n      __element = document.createElement(\"button\");\n      __push(__element);\n      __element = document.createTextNode('');\n      __text(__element, \"Load Issues\\n\");\n      __push(__element);\n      __pop();\n      __on(\"click\", this.load);\n      __pop();\n      __element = document.createElement(\"ul\");\n      __push(__element);\n      __each(this.issues, function(issue) {\n        __element = document.createElement(\"li\");\n        __push(__element);\n        __element = document.createElement(\"h3\");\n        __push(__element);\n        __element = document.createTextNode('');\n        __text(__element, issue.title);\n        __push(__element);\n        __pop();\n        __pop();\n        __element = document.createElement(\"p\");\n        __push(__element);\n        __element = document.createTextNode('');\n        __text(__element, issue.body);\n        __push(__element);\n        __pop();\n        __pop();\n        return __pop();\n      });\n      __pop();\n      __element = document.createElement(\"label\");\n      __push(__element);\n      __element = document.createElement(\"h3\");\n      __push(__element);\n      __element = document.createTextNode('');\n      __text(__element, \"Title\\n\");\n      __push(__element);\n      __pop();\n      __pop();\n      __element = document.createElement(\"input\");\n      __push(__element);\n      __on(\"change\", this.title);\n      __pop();\n      __pop();\n      __element = document.createElement(\"label\");\n      __push(__element);\n      __element = document.createElement(\"textarea\");\n      __push(__element);\n      __on(\"change\", this.body);\n      __pop();\n      __pop();\n      __element = document.createElement(\"button\");\n      __push(__element);\n      __element = document.createTextNode('');\n      __text(__element, \"Create\\n\");\n      __push(__element);\n      __pop();\n      __on(\"click\", this.createIssue);\n      __pop();\n      return __pop();\n    }).call(data);\n  };\n\n}).call(this);\n;(function() {\n  var utf8;\n\n  console.log(\".coffee.md is 2legit\");\n\n  utf8 = \"<@>JÃ¶rn\";\n\n}).call(this);\n;(function() {\n  var $root, currentNode, distribution, issues, repo, source, squire, styleContent, _ref;\n\n  source = ENV.source, distribution = ENV.distribution;\n\n  currentNode = function() {\n    var target;\n    target = document.documentElement;\n    while (target.childNodes.length && target.lastChild.nodeType === 1) {\n      target = target.lastChild;\n    }\n    return target.parentNode;\n  };\n\n  $root = $(currentNode());\n\n  if (styleContent = (_ref = distribution[\"style.css\"]) != null ? _ref.content : void 0) {\n    $root.append($(\"<style>\", {\n      html: styleContent\n    }));\n  }\n\n  squire = GitSquire();\n\n  squire.onload();\n\n  repo = squire.Repo({\n    owner: \"STRd6\",\n    repo: \"issues\"\n  });\n\n  issues = Observable([]);\n\n  $root.append(HAMLjr.templates.main({\n    load: function() {\n      return repo.issues().then(issues);\n    },\n    issues: issues,\n    title: Observable(\"\"),\n    body: Observable(\"\"),\n    createIssue: function() {\n      repo.createIssue({\n        title: this.title(),\n        body: this.body()\n      });\n      this.body(\"\");\n      return this.title(\"\");\n    }\n  }));\n\n}).call(this);")({"source":{"README.md":{"path":"README.md","mode":"100644","content":"issues\n======\n\nGithub's got issues\n\nGoal\n----\n\nCurrently just a testing ground for the editor.\n\nMaybe one day use to display a little issues widget on a page.\n","type":"blob"},"git_squire.coffee":{"path":"git_squire.coffee","mode":"100644","content":"@GitSquire = (I={}) ->\n  Object.defaults I,\n    accessToken: null\n\n  self =\n    # Calling auth will redirect to github for authentication\n    auth: ->\n      scope = \"gist,repo,user:email\"\n      url = \"https://github.com/login/oauth/authorize?client_id=bc46af967c926ba4ff87&scope=#{scope}\"\n  \n      window.location = url\n  \n    # Call onload to check for the code returned from github authentication\n    # and to get our access token from our authorization app.\n    onload: ->\n      # TODO: Namespace local storage key\n  \n      if code = window.location.href.match(/\\?code=(.*)/)?[1]\n        $.getJSON \"https://hamljr-auth.herokuapp.com/authenticate/#{code}\", (data) =>\n          if token = data.token\n            I.accessToken = token\n            localStorage.authToken = token\n  \n      if localStorage.authToken\n        I.accessToken = localStorage.authToken\n  \n    api: (path, options={}) ->\n      if path.match /^http/\n        url = path\n      else\n        url = \"https://api.github.com/#{path}\"\n      \n      options.headers ||= {}\n      \n      if I.accessToken\n        options.headers[\"Authorization\"] = \"token #{I.accessToken}\"\n  \n      options = Object.extend\n        url: url\n        type: \"GET\"\n        dataType: 'json'\n      , options\n\n      if options.data and typeof options.data != \"string\"\n        options.data = JSON.stringify(options.data)\n\n      $.ajax options\n  \n    Repo: ({owner, repo, branch}) ->\n      branch ?= \"master\"\n\n      api = (path, options={}) ->\n        base = \"repos/#{owner}/#{repo}\"\n        \n        if path.match /^http/\n          url = path\n        else\n          url = \"https://api.github.com/#{base}/#{path}\"\n\n        self.api url, options\n\n      issues: ->\n        api \"issues\"\n\n      createIssue: (params) ->\n        api \"issues\",\n          type: \"POST\"\n          data: params\n","type":"blob"},"main.coffee":{"path":"main.coffee","mode":"100644","content":"# Get stuff from our env\n{source, distribution} = ENV\n\n# TODO: Move to env utils\ncurrentNode = ->\n  target = document.documentElement\n\n  while (target.childNodes.length and target.lastChild.nodeType == 1)\n    target = target.lastChild\n\n  return target.parentNode\n\n# The root is the node that contains the script file.\n$root = $(currentNode())\n\n# Apply our styles\nif styleContent = distribution[\"style.css\"]?.content\n  $root.append $(\"<style>\",\n    html: styleContent\n  )\n\nsquire = GitSquire()\nsquire.onload()\n\nrepo = squire.Repo\n  owner: \"STRd6\"\n  repo: \"issues\"\n  \nissues = Observable []\n\n$root\n  .append(HAMLjr.templates.main(\n    load: ->\n      repo.issues().then issues\n\n    issues: issues\n    title: Observable \"\"\n    body: Observable \"\"\n    createIssue: ->\n      repo.createIssue\n        title: @title()\n        body: @body()\n\n      @body(\"\")\n      @title(\"\")\n  ))\n","type":"blob"},"main.haml":{"path":"main.haml","mode":"100644","content":"- main = this\n\n%button Load Issues\n  - on \"click\", @load\n\n%ul\n  - each @issues, (issue) ->\n    %li\n      %h3= issue.title\n      %p= issue.body\n\n%label\n  %h3 Title\n  %input\n    - on \"change\", @title\n\n%label\n  %textarea\n    - on \"change\", @body\n\n%button Create\n  - on \"click\", @createIssue\n","type":"blob"},"style.styl":{"path":"style.styl","mode":"100644","content":"label\n  display: block\n","type":"blob"},"test.coffee.md":{"path":"test.coffee.md","mode":"100644","content":"\nTesting\n\n    console.log \".coffee.md is 2legit\"\n\n    utf8 = \"<@>JÃ¶rn\"\n","type":"blob"}},"distribution":{"build.js":{"path":"build.js","content":"(function() {\n  this.GitSquire = function(I) {\n    var self;\n    if (I == null) {\n      I = {};\n    }\n    Object.defaults(I, {\n      accessToken: null\n    });\n    return self = {\n      auth: function() {\n        var scope, url;\n        scope = \"gist,repo,user:email\";\n        url = \"https://github.com/login/oauth/authorize?client_id=bc46af967c926ba4ff87&scope=\" + scope;\n        return window.location = url;\n      },\n      onload: function() {\n        var code, _ref,\n          _this = this;\n        if (code = (_ref = window.location.href.match(/\\?code=(.*)/)) != null ? _ref[1] : void 0) {\n          $.getJSON(\"https://hamljr-auth.herokuapp.com/authenticate/\" + code, function(data) {\n            var token;\n            if (token = data.token) {\n              I.accessToken = token;\n              return localStorage.authToken = token;\n            }\n          });\n        }\n        if (localStorage.authToken) {\n          return I.accessToken = localStorage.authToken;\n        }\n      },\n      api: function(path, options) {\n        var url;\n        if (options == null) {\n          options = {};\n        }\n        if (path.match(/^http/)) {\n          url = path;\n        } else {\n          url = \"https://api.github.com/\" + path;\n        }\n        options.headers || (options.headers = {});\n        if (I.accessToken) {\n          options.headers[\"Authorization\"] = \"token \" + I.accessToken;\n        }\n        options = Object.extend({\n          url: url,\n          type: \"GET\",\n          dataType: 'json'\n        }, options);\n        if (options.data && typeof options.data !== \"string\") {\n          options.data = JSON.stringify(options.data);\n        }\n        return $.ajax(options);\n      },\n      Repo: function(_arg) {\n        var api, branch, owner, repo;\n        owner = _arg.owner, repo = _arg.repo, branch = _arg.branch;\n        if (branch == null) {\n          branch = \"master\";\n        }\n        api = function(path, options) {\n          var base, url;\n          if (options == null) {\n            options = {};\n          }\n          base = \"repos/\" + owner + \"/\" + repo;\n          if (path.match(/^http/)) {\n            url = path;\n          } else {\n            url = \"https://api.github.com/\" + base + \"/\" + path;\n          }\n          return self.api(url, options);\n        };\n        return {\n          issues: function() {\n            return api(\"issues\");\n          },\n          createIssue: function(params) {\n            return api(\"issues\", {\n              type: \"POST\",\n              data: params\n            });\n          }\n        };\n      }\n    };\n  };\n\n}).call(this);\n;(function() {\n  var _base;\n\n  this.HAMLjr || (this.HAMLjr = {});\n\n  (_base = this.HAMLjr).templates || (_base.templates = {});\n\n  this.HAMLjr.templates[\"main\"] = function(data) {\n    return (function() {\n      var main, __attribute, __each, __element, __filter, __on, __pop, __push, __render, __text, __with, _ref;\n      _ref = HAMLjr.Runtime(this), __push = _ref.__push, __pop = _ref.__pop, __attribute = _ref.__attribute, __filter = _ref.__filter, __text = _ref.__text, __on = _ref.__on, __each = _ref.__each, __with = _ref.__with, __render = _ref.__render;\n      __push(document.createDocumentFragment());\n      main = this;\n      __element = document.createElement(\"button\");\n      __push(__element);\n      __element = document.createTextNode('');\n      __text(__element, \"Load Issues\\n\");\n      __push(__element);\n      __pop();\n      __on(\"click\", this.load);\n      __pop();\n      __element = document.createElement(\"ul\");\n      __push(__element);\n      __each(this.issues, function(issue) {\n        __element = document.createElement(\"li\");\n        __push(__element);\n        __element = document.createElement(\"h3\");\n        __push(__element);\n        __element = document.createTextNode('');\n        __text(__element, issue.title);\n        __push(__element);\n        __pop();\n        __pop();\n        __element = document.createElement(\"p\");\n        __push(__element);\n        __element = document.createTextNode('');\n        __text(__element, issue.body);\n        __push(__element);\n        __pop();\n        __pop();\n        return __pop();\n      });\n      __pop();\n      __element = document.createElement(\"label\");\n      __push(__element);\n      __element = document.createElement(\"h3\");\n      __push(__element);\n      __element = document.createTextNode('');\n      __text(__element, \"Title\\n\");\n      __push(__element);\n      __pop();\n      __pop();\n      __element = document.createElement(\"input\");\n      __push(__element);\n      __on(\"change\", this.title);\n      __pop();\n      __pop();\n      __element = document.createElement(\"label\");\n      __push(__element);\n      __element = document.createElement(\"textarea\");\n      __push(__element);\n      __on(\"change\", this.body);\n      __pop();\n      __pop();\n      __element = document.createElement(\"button\");\n      __push(__element);\n      __element = document.createTextNode('');\n      __text(__element, \"Create\\n\");\n      __push(__element);\n      __pop();\n      __on(\"click\", this.createIssue);\n      __pop();\n      return __pop();\n    }).call(data);\n  };\n\n}).call(this);\n;(function() {\n  var utf8;\n\n  console.log(\".coffee.md is 2legit\");\n\n  utf8 = \"<@>JÃ¶rn\";\n\n}).call(this);\n;(function() {\n  var $root, currentNode, distribution, issues, repo, source, squire, styleContent, _ref;\n\n  source = ENV.source, distribution = ENV.distribution;\n\n  currentNode = function() {\n    var target;\n    target = document.documentElement;\n    while (target.childNodes.length && target.lastChild.nodeType === 1) {\n      target = target.lastChild;\n    }\n    return target.parentNode;\n  };\n\n  $root = $(currentNode());\n\n  if (styleContent = (_ref = distribution[\"style.css\"]) != null ? _ref.content : void 0) {\n    $root.append($(\"<style>\", {\n      html: styleContent\n    }));\n  }\n\n  squire = GitSquire();\n\n  squire.onload();\n\n  repo = squire.Repo({\n    owner: \"STRd6\",\n    repo: \"issues\"\n  });\n\n  issues = Observable([]);\n\n  $root.append(HAMLjr.templates.main({\n    load: function() {\n      return repo.issues().then(issues);\n    },\n    issues: issues,\n    title: Observable(\"\"),\n    body: Observable(\"\"),\n    createIssue: function() {\n      repo.createIssue({\n        title: this.title(),\n        body: this.body()\n      });\n      this.body(\"\");\n      return this.title(\"\");\n    }\n  }));\n\n}).call(this);","type":"blob"},"style.css":{"path":"style.css","content":"label {\n  display: block;\n}","type":"blob"}},"repository":{"full_name":"STRd6/issues","branch":"master"},"progenitor":{"url":"http://strd6.github.io/editor/"}});